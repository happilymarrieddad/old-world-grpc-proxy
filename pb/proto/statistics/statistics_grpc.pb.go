// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/statistics/statistics.proto

package statistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1Statistics_GetStatistics_FullMethodName   = "/statistics.V1Statistics/GetStatistics"
	V1Statistics_GetStatistic_FullMethodName    = "/statistics.V1Statistics/GetStatistic"
	V1Statistics_CreateStatistic_FullMethodName = "/statistics.V1Statistics/CreateStatistic"
	V1Statistics_UpdateStatistic_FullMethodName = "/statistics.V1Statistics/UpdateStatistic"
	V1Statistics_DeleteStatistic_FullMethodName = "/statistics.V1Statistics/DeleteStatistic"
)

// V1StatisticsClient is the client API for V1Statistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1StatisticsClient interface {
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsReply, error)
	GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*Statistic, error)
	CreateStatistic(ctx context.Context, in *CreateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error)
	UpdateStatistic(ctx context.Context, in *UpdateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error)
	DeleteStatistic(ctx context.Context, in *DeleteStatisticRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1StatisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewV1StatisticsClient(cc grpc.ClientConnInterface) V1StatisticsClient {
	return &v1StatisticsClient{cc}
}

func (c *v1StatisticsClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsReply, error) {
	out := new(GetStatisticsReply)
	err := c.cc.Invoke(ctx, V1Statistics_GetStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1StatisticsClient) GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, V1Statistics_GetStatistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1StatisticsClient) CreateStatistic(ctx context.Context, in *CreateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, V1Statistics_CreateStatistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1StatisticsClient) UpdateStatistic(ctx context.Context, in *UpdateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, V1Statistics_UpdateStatistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1StatisticsClient) DeleteStatistic(ctx context.Context, in *DeleteStatisticRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1Statistics_DeleteStatistic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1StatisticsServer is the server API for V1Statistics service.
// All implementations must embed UnimplementedV1StatisticsServer
// for forward compatibility
type V1StatisticsServer interface {
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsReply, error)
	GetStatistic(context.Context, *GetStatisticRequest) (*Statistic, error)
	CreateStatistic(context.Context, *CreateStatisticRequest) (*Statistic, error)
	UpdateStatistic(context.Context, *UpdateStatisticRequest) (*Statistic, error)
	DeleteStatistic(context.Context, *DeleteStatisticRequest) (*EmptyReply, error)
	mustEmbedUnimplementedV1StatisticsServer()
}

// UnimplementedV1StatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedV1StatisticsServer struct {
}

func (UnimplementedV1StatisticsServer) GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedV1StatisticsServer) GetStatistic(context.Context, *GetStatisticRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}
func (UnimplementedV1StatisticsServer) CreateStatistic(context.Context, *CreateStatisticRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatistic not implemented")
}
func (UnimplementedV1StatisticsServer) UpdateStatistic(context.Context, *UpdateStatisticRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatistic not implemented")
}
func (UnimplementedV1StatisticsServer) DeleteStatistic(context.Context, *DeleteStatisticRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatistic not implemented")
}
func (UnimplementedV1StatisticsServer) mustEmbedUnimplementedV1StatisticsServer() {}

// UnsafeV1StatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1StatisticsServer will
// result in compilation errors.
type UnsafeV1StatisticsServer interface {
	mustEmbedUnimplementedV1StatisticsServer()
}

func RegisterV1StatisticsServer(s grpc.ServiceRegistrar, srv V1StatisticsServer) {
	s.RegisterService(&V1Statistics_ServiceDesc, srv)
}

func _V1Statistics_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1StatisticsServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Statistics_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1StatisticsServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Statistics_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1StatisticsServer).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Statistics_GetStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1StatisticsServer).GetStatistic(ctx, req.(*GetStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Statistics_CreateStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1StatisticsServer).CreateStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Statistics_CreateStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1StatisticsServer).CreateStatistic(ctx, req.(*CreateStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Statistics_UpdateStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1StatisticsServer).UpdateStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Statistics_UpdateStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1StatisticsServer).UpdateStatistic(ctx, req.(*UpdateStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Statistics_DeleteStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1StatisticsServer).DeleteStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Statistics_DeleteStatistic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1StatisticsServer).DeleteStatistic(ctx, req.(*DeleteStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1Statistics_ServiceDesc is the grpc.ServiceDesc for V1Statistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1Statistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistics.V1Statistics",
	HandlerType: (*V1StatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatistics",
			Handler:    _V1Statistics_GetStatistics_Handler,
		},
		{
			MethodName: "GetStatistic",
			Handler:    _V1Statistics_GetStatistic_Handler,
		},
		{
			MethodName: "CreateStatistic",
			Handler:    _V1Statistics_CreateStatistic_Handler,
		},
		{
			MethodName: "UpdateStatistic",
			Handler:    _V1Statistics_UpdateStatistic_Handler,
		},
		{
			MethodName: "DeleteStatistic",
			Handler:    _V1Statistics_DeleteStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/statistics/statistics.proto",
}
