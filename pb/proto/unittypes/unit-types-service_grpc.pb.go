// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/unittypes/unit-types-service.proto

package unittypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1UnitTypes_GetUnitTypes_FullMethodName                  = "/unittypes.V1UnitTypes/GetUnitTypes"
	V1UnitTypes_GetUnitType_FullMethodName                   = "/unittypes.V1UnitTypes/GetUnitType"
	V1UnitTypes_CreateUnitType_FullMethodName                = "/unittypes.V1UnitTypes/CreateUnitType"
	V1UnitTypes_UpdateUnitType_FullMethodName                = "/unittypes.V1UnitTypes/UpdateUnitType"
	V1UnitTypes_DeleteUnitType_FullMethodName                = "/unittypes.V1UnitTypes/DeleteUnitType"
	V1UnitTypes_GetBasicUnitTypesByArmyTypeID_FullMethodName = "/unittypes.V1UnitTypes/GetBasicUnitTypesByArmyTypeID"
)

// V1UnitTypesClient is the client API for V1UnitTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1UnitTypesClient interface {
	GetUnitTypes(ctx context.Context, in *GetUnitTypesRequest, opts ...grpc.CallOption) (*GetUnitTypesReply, error)
	GetUnitType(ctx context.Context, in *GetUnitTypeRequest, opts ...grpc.CallOption) (*UnitType, error)
	CreateUnitType(ctx context.Context, in *CreateUnitTypeRequest, opts ...grpc.CallOption) (*UnitType, error)
	UpdateUnitType(ctx context.Context, in *UpdateUnitTypeRequest, opts ...grpc.CallOption) (*UnitType, error)
	DeleteUnitType(ctx context.Context, in *DeleteUnitTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	GetBasicUnitTypesByArmyTypeID(ctx context.Context, in *ArmyTypeIdRequest, opts ...grpc.CallOption) (*ArmyTypeIdReply, error)
}

type v1UnitTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1UnitTypesClient(cc grpc.ClientConnInterface) V1UnitTypesClient {
	return &v1UnitTypesClient{cc}
}

func (c *v1UnitTypesClient) GetUnitTypes(ctx context.Context, in *GetUnitTypesRequest, opts ...grpc.CallOption) (*GetUnitTypesReply, error) {
	out := new(GetUnitTypesReply)
	err := c.cc.Invoke(ctx, V1UnitTypes_GetUnitTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UnitTypesClient) GetUnitType(ctx context.Context, in *GetUnitTypeRequest, opts ...grpc.CallOption) (*UnitType, error) {
	out := new(UnitType)
	err := c.cc.Invoke(ctx, V1UnitTypes_GetUnitType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UnitTypesClient) CreateUnitType(ctx context.Context, in *CreateUnitTypeRequest, opts ...grpc.CallOption) (*UnitType, error) {
	out := new(UnitType)
	err := c.cc.Invoke(ctx, V1UnitTypes_CreateUnitType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UnitTypesClient) UpdateUnitType(ctx context.Context, in *UpdateUnitTypeRequest, opts ...grpc.CallOption) (*UnitType, error) {
	out := new(UnitType)
	err := c.cc.Invoke(ctx, V1UnitTypes_UpdateUnitType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UnitTypesClient) DeleteUnitType(ctx context.Context, in *DeleteUnitTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1UnitTypes_DeleteUnitType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UnitTypesClient) GetBasicUnitTypesByArmyTypeID(ctx context.Context, in *ArmyTypeIdRequest, opts ...grpc.CallOption) (*ArmyTypeIdReply, error) {
	out := new(ArmyTypeIdReply)
	err := c.cc.Invoke(ctx, V1UnitTypes_GetBasicUnitTypesByArmyTypeID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1UnitTypesServer is the server API for V1UnitTypes service.
// All implementations must embed UnimplementedV1UnitTypesServer
// for forward compatibility
type V1UnitTypesServer interface {
	GetUnitTypes(context.Context, *GetUnitTypesRequest) (*GetUnitTypesReply, error)
	GetUnitType(context.Context, *GetUnitTypeRequest) (*UnitType, error)
	CreateUnitType(context.Context, *CreateUnitTypeRequest) (*UnitType, error)
	UpdateUnitType(context.Context, *UpdateUnitTypeRequest) (*UnitType, error)
	DeleteUnitType(context.Context, *DeleteUnitTypeRequest) (*EmptyReply, error)
	GetBasicUnitTypesByArmyTypeID(context.Context, *ArmyTypeIdRequest) (*ArmyTypeIdReply, error)
	mustEmbedUnimplementedV1UnitTypesServer()
}

// UnimplementedV1UnitTypesServer must be embedded to have forward compatible implementations.
type UnimplementedV1UnitTypesServer struct {
}

func (UnimplementedV1UnitTypesServer) GetUnitTypes(context.Context, *GetUnitTypesRequest) (*GetUnitTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitTypes not implemented")
}
func (UnimplementedV1UnitTypesServer) GetUnitType(context.Context, *GetUnitTypeRequest) (*UnitType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitType not implemented")
}
func (UnimplementedV1UnitTypesServer) CreateUnitType(context.Context, *CreateUnitTypeRequest) (*UnitType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnitType not implemented")
}
func (UnimplementedV1UnitTypesServer) UpdateUnitType(context.Context, *UpdateUnitTypeRequest) (*UnitType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitType not implemented")
}
func (UnimplementedV1UnitTypesServer) DeleteUnitType(context.Context, *DeleteUnitTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnitType not implemented")
}
func (UnimplementedV1UnitTypesServer) GetBasicUnitTypesByArmyTypeID(context.Context, *ArmyTypeIdRequest) (*ArmyTypeIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicUnitTypesByArmyTypeID not implemented")
}
func (UnimplementedV1UnitTypesServer) mustEmbedUnimplementedV1UnitTypesServer() {}

// UnsafeV1UnitTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1UnitTypesServer will
// result in compilation errors.
type UnsafeV1UnitTypesServer interface {
	mustEmbedUnimplementedV1UnitTypesServer()
}

func RegisterV1UnitTypesServer(s grpc.ServiceRegistrar, srv V1UnitTypesServer) {
	s.RegisterService(&V1UnitTypes_ServiceDesc, srv)
}

func _V1UnitTypes_GetUnitTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UnitTypesServer).GetUnitTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UnitTypes_GetUnitTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UnitTypesServer).GetUnitTypes(ctx, req.(*GetUnitTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UnitTypes_GetUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UnitTypesServer).GetUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UnitTypes_GetUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UnitTypesServer).GetUnitType(ctx, req.(*GetUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UnitTypes_CreateUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UnitTypesServer).CreateUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UnitTypes_CreateUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UnitTypesServer).CreateUnitType(ctx, req.(*CreateUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UnitTypes_UpdateUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UnitTypesServer).UpdateUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UnitTypes_UpdateUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UnitTypesServer).UpdateUnitType(ctx, req.(*UpdateUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UnitTypes_DeleteUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UnitTypesServer).DeleteUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UnitTypes_DeleteUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UnitTypesServer).DeleteUnitType(ctx, req.(*DeleteUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UnitTypes_GetBasicUnitTypesByArmyTypeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArmyTypeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UnitTypesServer).GetBasicUnitTypesByArmyTypeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UnitTypes_GetBasicUnitTypesByArmyTypeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UnitTypesServer).GetBasicUnitTypesByArmyTypeID(ctx, req.(*ArmyTypeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1UnitTypes_ServiceDesc is the grpc.ServiceDesc for V1UnitTypes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1UnitTypes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unittypes.V1UnitTypes",
	HandlerType: (*V1UnitTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnitTypes",
			Handler:    _V1UnitTypes_GetUnitTypes_Handler,
		},
		{
			MethodName: "GetUnitType",
			Handler:    _V1UnitTypes_GetUnitType_Handler,
		},
		{
			MethodName: "CreateUnitType",
			Handler:    _V1UnitTypes_CreateUnitType_Handler,
		},
		{
			MethodName: "UpdateUnitType",
			Handler:    _V1UnitTypes_UpdateUnitType_Handler,
		},
		{
			MethodName: "DeleteUnitType",
			Handler:    _V1UnitTypes_DeleteUnitType_Handler,
		},
		{
			MethodName: "GetBasicUnitTypesByArmyTypeID",
			Handler:    _V1UnitTypes_GetBasicUnitTypesByArmyTypeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/unittypes/unit-types-service.proto",
}
