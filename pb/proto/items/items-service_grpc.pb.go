// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/items/items-service.proto

package items

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1Items_GetGameItems_FullMethodName = "/items.V1Items/GetGameItems"
	V1Items_GetArmyItems_FullMethodName = "/items.V1Items/GetArmyItems"
	V1Items_GetItem_FullMethodName      = "/items.V1Items/GetItem"
	V1Items_CreateItem_FullMethodName   = "/items.V1Items/CreateItem"
	V1Items_UpdateItem_FullMethodName   = "/items.V1Items/UpdateItem"
)

// V1ItemsClient is the client API for V1Items service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1ItemsClient interface {
	GetGameItems(ctx context.Context, in *GetGameItemsRequest, opts ...grpc.CallOption) (*GetItemsReply, error)
	GetArmyItems(ctx context.Context, in *GetArmyItemsRequest, opts ...grpc.CallOption) (*GetItemsReply, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemReply, error)
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1ItemsClient struct {
	cc grpc.ClientConnInterface
}

func NewV1ItemsClient(cc grpc.ClientConnInterface) V1ItemsClient {
	return &v1ItemsClient{cc}
}

func (c *v1ItemsClient) GetGameItems(ctx context.Context, in *GetGameItemsRequest, opts ...grpc.CallOption) (*GetItemsReply, error) {
	out := new(GetItemsReply)
	err := c.cc.Invoke(ctx, V1Items_GetGameItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemsClient) GetArmyItems(ctx context.Context, in *GetArmyItemsRequest, opts ...grpc.CallOption) (*GetItemsReply, error) {
	out := new(GetItemsReply)
	err := c.cc.Invoke(ctx, V1Items_GetArmyItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemsClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemReply, error) {
	out := new(GetItemReply)
	err := c.cc.Invoke(ctx, V1Items_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemsClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1Items_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemsClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1Items_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1ItemsServer is the server API for V1Items service.
// All implementations must embed UnimplementedV1ItemsServer
// for forward compatibility
type V1ItemsServer interface {
	GetGameItems(context.Context, *GetGameItemsRequest) (*GetItemsReply, error)
	GetArmyItems(context.Context, *GetArmyItemsRequest) (*GetItemsReply, error)
	GetItem(context.Context, *GetItemRequest) (*GetItemReply, error)
	CreateItem(context.Context, *CreateItemRequest) (*EmptyReply, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*EmptyReply, error)
	mustEmbedUnimplementedV1ItemsServer()
}

// UnimplementedV1ItemsServer must be embedded to have forward compatible implementations.
type UnimplementedV1ItemsServer struct {
}

func (UnimplementedV1ItemsServer) GetGameItems(context.Context, *GetGameItemsRequest) (*GetItemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameItems not implemented")
}
func (UnimplementedV1ItemsServer) GetArmyItems(context.Context, *GetArmyItemsRequest) (*GetItemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmyItems not implemented")
}
func (UnimplementedV1ItemsServer) GetItem(context.Context, *GetItemRequest) (*GetItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedV1ItemsServer) CreateItem(context.Context, *CreateItemRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedV1ItemsServer) UpdateItem(context.Context, *UpdateItemRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedV1ItemsServer) mustEmbedUnimplementedV1ItemsServer() {}

// UnsafeV1ItemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1ItemsServer will
// result in compilation errors.
type UnsafeV1ItemsServer interface {
	mustEmbedUnimplementedV1ItemsServer()
}

func RegisterV1ItemsServer(s grpc.ServiceRegistrar, srv V1ItemsServer) {
	s.RegisterService(&V1Items_ServiceDesc, srv)
}

func _V1Items_GetGameItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemsServer).GetGameItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Items_GetGameItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemsServer).GetGameItems(ctx, req.(*GetGameItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Items_GetArmyItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmyItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemsServer).GetArmyItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Items_GetArmyItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemsServer).GetArmyItems(ctx, req.(*GetArmyItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Items_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemsServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Items_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemsServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Items_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemsServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Items_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemsServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Items_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemsServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Items_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemsServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1Items_ServiceDesc is the grpc.ServiceDesc for V1Items service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1Items_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "items.V1Items",
	HandlerType: (*V1ItemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameItems",
			Handler:    _V1Items_GetGameItems_Handler,
		},
		{
			MethodName: "GetArmyItems",
			Handler:    _V1Items_GetArmyItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _V1Items_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _V1Items_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _V1Items_UpdateItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/items/items-service.proto",
}
