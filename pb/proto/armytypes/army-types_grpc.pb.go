// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/armytypes/army-types.proto

package armytypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1ArmyTypes_GetArmyTypes_FullMethodName   = "/armytypes.V1ArmyTypes/GetArmyTypes"
	V1ArmyTypes_GetArmyType_FullMethodName    = "/armytypes.V1ArmyTypes/GetArmyType"
	V1ArmyTypes_CreateArmyType_FullMethodName = "/armytypes.V1ArmyTypes/CreateArmyType"
	V1ArmyTypes_UpdateArmyType_FullMethodName = "/armytypes.V1ArmyTypes/UpdateArmyType"
	V1ArmyTypes_DeleteArmyType_FullMethodName = "/armytypes.V1ArmyTypes/DeleteArmyType"
)

// V1ArmyTypesClient is the client API for V1ArmyTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1ArmyTypesClient interface {
	GetArmyTypes(ctx context.Context, in *GetArmyTypesRequest, opts ...grpc.CallOption) (*GetArmyTypesReply, error)
	GetArmyType(ctx context.Context, in *GetArmyTypeRequest, opts ...grpc.CallOption) (*ArmyType, error)
	CreateArmyType(ctx context.Context, in *CreateArmyTypeRequest, opts ...grpc.CallOption) (*ArmyType, error)
	UpdateArmyType(ctx context.Context, in *UpdateArmyTypeRequest, opts ...grpc.CallOption) (*ArmyType, error)
	DeleteArmyType(ctx context.Context, in *DeleteArmyTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1ArmyTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1ArmyTypesClient(cc grpc.ClientConnInterface) V1ArmyTypesClient {
	return &v1ArmyTypesClient{cc}
}

func (c *v1ArmyTypesClient) GetArmyTypes(ctx context.Context, in *GetArmyTypesRequest, opts ...grpc.CallOption) (*GetArmyTypesReply, error) {
	out := new(GetArmyTypesReply)
	err := c.cc.Invoke(ctx, V1ArmyTypes_GetArmyTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ArmyTypesClient) GetArmyType(ctx context.Context, in *GetArmyTypeRequest, opts ...grpc.CallOption) (*ArmyType, error) {
	out := new(ArmyType)
	err := c.cc.Invoke(ctx, V1ArmyTypes_GetArmyType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ArmyTypesClient) CreateArmyType(ctx context.Context, in *CreateArmyTypeRequest, opts ...grpc.CallOption) (*ArmyType, error) {
	out := new(ArmyType)
	err := c.cc.Invoke(ctx, V1ArmyTypes_CreateArmyType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ArmyTypesClient) UpdateArmyType(ctx context.Context, in *UpdateArmyTypeRequest, opts ...grpc.CallOption) (*ArmyType, error) {
	out := new(ArmyType)
	err := c.cc.Invoke(ctx, V1ArmyTypes_UpdateArmyType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ArmyTypesClient) DeleteArmyType(ctx context.Context, in *DeleteArmyTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1ArmyTypes_DeleteArmyType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1ArmyTypesServer is the server API for V1ArmyTypes service.
// All implementations must embed UnimplementedV1ArmyTypesServer
// for forward compatibility
type V1ArmyTypesServer interface {
	GetArmyTypes(context.Context, *GetArmyTypesRequest) (*GetArmyTypesReply, error)
	GetArmyType(context.Context, *GetArmyTypeRequest) (*ArmyType, error)
	CreateArmyType(context.Context, *CreateArmyTypeRequest) (*ArmyType, error)
	UpdateArmyType(context.Context, *UpdateArmyTypeRequest) (*ArmyType, error)
	DeleteArmyType(context.Context, *DeleteArmyTypeRequest) (*EmptyReply, error)
	mustEmbedUnimplementedV1ArmyTypesServer()
}

// UnimplementedV1ArmyTypesServer must be embedded to have forward compatible implementations.
type UnimplementedV1ArmyTypesServer struct {
}

func (UnimplementedV1ArmyTypesServer) GetArmyTypes(context.Context, *GetArmyTypesRequest) (*GetArmyTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmyTypes not implemented")
}
func (UnimplementedV1ArmyTypesServer) GetArmyType(context.Context, *GetArmyTypeRequest) (*ArmyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArmyType not implemented")
}
func (UnimplementedV1ArmyTypesServer) CreateArmyType(context.Context, *CreateArmyTypeRequest) (*ArmyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArmyType not implemented")
}
func (UnimplementedV1ArmyTypesServer) UpdateArmyType(context.Context, *UpdateArmyTypeRequest) (*ArmyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArmyType not implemented")
}
func (UnimplementedV1ArmyTypesServer) DeleteArmyType(context.Context, *DeleteArmyTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArmyType not implemented")
}
func (UnimplementedV1ArmyTypesServer) mustEmbedUnimplementedV1ArmyTypesServer() {}

// UnsafeV1ArmyTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1ArmyTypesServer will
// result in compilation errors.
type UnsafeV1ArmyTypesServer interface {
	mustEmbedUnimplementedV1ArmyTypesServer()
}

func RegisterV1ArmyTypesServer(s grpc.ServiceRegistrar, srv V1ArmyTypesServer) {
	s.RegisterService(&V1ArmyTypes_ServiceDesc, srv)
}

func _V1ArmyTypes_GetArmyTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmyTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ArmyTypesServer).GetArmyTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ArmyTypes_GetArmyTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ArmyTypesServer).GetArmyTypes(ctx, req.(*GetArmyTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ArmyTypes_GetArmyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ArmyTypesServer).GetArmyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ArmyTypes_GetArmyType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ArmyTypesServer).GetArmyType(ctx, req.(*GetArmyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ArmyTypes_CreateArmyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArmyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ArmyTypesServer).CreateArmyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ArmyTypes_CreateArmyType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ArmyTypesServer).CreateArmyType(ctx, req.(*CreateArmyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ArmyTypes_UpdateArmyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArmyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ArmyTypesServer).UpdateArmyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ArmyTypes_UpdateArmyType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ArmyTypesServer).UpdateArmyType(ctx, req.(*UpdateArmyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ArmyTypes_DeleteArmyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArmyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ArmyTypesServer).DeleteArmyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ArmyTypes_DeleteArmyType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ArmyTypesServer).DeleteArmyType(ctx, req.(*DeleteArmyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1ArmyTypes_ServiceDesc is the grpc.ServiceDesc for V1ArmyTypes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1ArmyTypes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "armytypes.V1ArmyTypes",
	HandlerType: (*V1ArmyTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArmyTypes",
			Handler:    _V1ArmyTypes_GetArmyTypes_Handler,
		},
		{
			MethodName: "GetArmyType",
			Handler:    _V1ArmyTypes_GetArmyType_Handler,
		},
		{
			MethodName: "CreateArmyType",
			Handler:    _V1ArmyTypes_CreateArmyType_Handler,
		},
		{
			MethodName: "UpdateArmyType",
			Handler:    _V1ArmyTypes_UpdateArmyType_Handler,
		},
		{
			MethodName: "DeleteArmyType",
			Handler:    _V1ArmyTypes_DeleteArmyType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/armytypes/army-types.proto",
}
