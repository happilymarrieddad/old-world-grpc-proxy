// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/compositiontypes/composition-types.proto

package compositiontypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1CompositionTypes_GetCompositionTypes_FullMethodName   = "/compositiontypes.V1CompositionTypes/GetCompositionTypes"
	V1CompositionTypes_GetCompositionType_FullMethodName    = "/compositiontypes.V1CompositionTypes/GetCompositionType"
	V1CompositionTypes_CreateCompositionType_FullMethodName = "/compositiontypes.V1CompositionTypes/CreateCompositionType"
	V1CompositionTypes_UpdateCompositionType_FullMethodName = "/compositiontypes.V1CompositionTypes/UpdateCompositionType"
	V1CompositionTypes_DeleteCompositionType_FullMethodName = "/compositiontypes.V1CompositionTypes/DeleteCompositionType"
)

// V1CompositionTypesClient is the client API for V1CompositionTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1CompositionTypesClient interface {
	GetCompositionTypes(ctx context.Context, in *GetCompositionTypesRequest, opts ...grpc.CallOption) (*GetCompositionTypesReply, error)
	GetCompositionType(ctx context.Context, in *GetCompositionTypeRequest, opts ...grpc.CallOption) (*CompositionType, error)
	CreateCompositionType(ctx context.Context, in *CreateCompositionTypeRequest, opts ...grpc.CallOption) (*CompositionType, error)
	UpdateCompositionType(ctx context.Context, in *UpdateCompositionTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	DeleteCompositionType(ctx context.Context, in *DeleteCompositionTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1CompositionTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1CompositionTypesClient(cc grpc.ClientConnInterface) V1CompositionTypesClient {
	return &v1CompositionTypesClient{cc}
}

func (c *v1CompositionTypesClient) GetCompositionTypes(ctx context.Context, in *GetCompositionTypesRequest, opts ...grpc.CallOption) (*GetCompositionTypesReply, error) {
	out := new(GetCompositionTypesReply)
	err := c.cc.Invoke(ctx, V1CompositionTypes_GetCompositionTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1CompositionTypesClient) GetCompositionType(ctx context.Context, in *GetCompositionTypeRequest, opts ...grpc.CallOption) (*CompositionType, error) {
	out := new(CompositionType)
	err := c.cc.Invoke(ctx, V1CompositionTypes_GetCompositionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1CompositionTypesClient) CreateCompositionType(ctx context.Context, in *CreateCompositionTypeRequest, opts ...grpc.CallOption) (*CompositionType, error) {
	out := new(CompositionType)
	err := c.cc.Invoke(ctx, V1CompositionTypes_CreateCompositionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1CompositionTypesClient) UpdateCompositionType(ctx context.Context, in *UpdateCompositionTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1CompositionTypes_UpdateCompositionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1CompositionTypesClient) DeleteCompositionType(ctx context.Context, in *DeleteCompositionTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1CompositionTypes_DeleteCompositionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1CompositionTypesServer is the server API for V1CompositionTypes service.
// All implementations must embed UnimplementedV1CompositionTypesServer
// for forward compatibility
type V1CompositionTypesServer interface {
	GetCompositionTypes(context.Context, *GetCompositionTypesRequest) (*GetCompositionTypesReply, error)
	GetCompositionType(context.Context, *GetCompositionTypeRequest) (*CompositionType, error)
	CreateCompositionType(context.Context, *CreateCompositionTypeRequest) (*CompositionType, error)
	UpdateCompositionType(context.Context, *UpdateCompositionTypeRequest) (*EmptyReply, error)
	DeleteCompositionType(context.Context, *DeleteCompositionTypeRequest) (*EmptyReply, error)
	mustEmbedUnimplementedV1CompositionTypesServer()
}

// UnimplementedV1CompositionTypesServer must be embedded to have forward compatible implementations.
type UnimplementedV1CompositionTypesServer struct {
}

func (UnimplementedV1CompositionTypesServer) GetCompositionTypes(context.Context, *GetCompositionTypesRequest) (*GetCompositionTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompositionTypes not implemented")
}
func (UnimplementedV1CompositionTypesServer) GetCompositionType(context.Context, *GetCompositionTypeRequest) (*CompositionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompositionType not implemented")
}
func (UnimplementedV1CompositionTypesServer) CreateCompositionType(context.Context, *CreateCompositionTypeRequest) (*CompositionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompositionType not implemented")
}
func (UnimplementedV1CompositionTypesServer) UpdateCompositionType(context.Context, *UpdateCompositionTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompositionType not implemented")
}
func (UnimplementedV1CompositionTypesServer) DeleteCompositionType(context.Context, *DeleteCompositionTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompositionType not implemented")
}
func (UnimplementedV1CompositionTypesServer) mustEmbedUnimplementedV1CompositionTypesServer() {}

// UnsafeV1CompositionTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1CompositionTypesServer will
// result in compilation errors.
type UnsafeV1CompositionTypesServer interface {
	mustEmbedUnimplementedV1CompositionTypesServer()
}

func RegisterV1CompositionTypesServer(s grpc.ServiceRegistrar, srv V1CompositionTypesServer) {
	s.RegisterService(&V1CompositionTypes_ServiceDesc, srv)
}

func _V1CompositionTypes_GetCompositionTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompositionTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1CompositionTypesServer).GetCompositionTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1CompositionTypes_GetCompositionTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1CompositionTypesServer).GetCompositionTypes(ctx, req.(*GetCompositionTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1CompositionTypes_GetCompositionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompositionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1CompositionTypesServer).GetCompositionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1CompositionTypes_GetCompositionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1CompositionTypesServer).GetCompositionType(ctx, req.(*GetCompositionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1CompositionTypes_CreateCompositionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompositionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1CompositionTypesServer).CreateCompositionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1CompositionTypes_CreateCompositionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1CompositionTypesServer).CreateCompositionType(ctx, req.(*CreateCompositionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1CompositionTypes_UpdateCompositionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompositionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1CompositionTypesServer).UpdateCompositionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1CompositionTypes_UpdateCompositionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1CompositionTypesServer).UpdateCompositionType(ctx, req.(*UpdateCompositionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1CompositionTypes_DeleteCompositionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompositionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1CompositionTypesServer).DeleteCompositionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1CompositionTypes_DeleteCompositionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1CompositionTypesServer).DeleteCompositionType(ctx, req.(*DeleteCompositionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1CompositionTypes_ServiceDesc is the grpc.ServiceDesc for V1CompositionTypes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1CompositionTypes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compositiontypes.V1CompositionTypes",
	HandlerType: (*V1CompositionTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompositionTypes",
			Handler:    _V1CompositionTypes_GetCompositionTypes_Handler,
		},
		{
			MethodName: "GetCompositionType",
			Handler:    _V1CompositionTypes_GetCompositionType_Handler,
		},
		{
			MethodName: "CreateCompositionType",
			Handler:    _V1CompositionTypes_CreateCompositionType_Handler,
		},
		{
			MethodName: "UpdateCompositionType",
			Handler:    _V1CompositionTypes_UpdateCompositionType_Handler,
		},
		{
			MethodName: "DeleteCompositionType",
			Handler:    _V1CompositionTypes_DeleteCompositionType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/compositiontypes/composition-types.proto",
}
