// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/games/game.proto

package games

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1Games_GetGame_FullMethodName    = "/games.V1Games/GetGame"
	V1Games_GetGames_FullMethodName   = "/games.V1Games/GetGames"
	V1Games_CreateGame_FullMethodName = "/games.V1Games/CreateGame"
	V1Games_DeleteGame_FullMethodName = "/games.V1Games/DeleteGame"
	V1Games_UpdateGame_FullMethodName = "/games.V1Games/UpdateGame"
)

// V1GamesClient is the client API for V1Games service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1GamesClient interface {
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error)
	GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesReply, error)
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1GamesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1GamesClient(cc grpc.ClientConnInterface) V1GamesClient {
	return &v1GamesClient{cc}
}

func (c *v1GamesClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error) {
	out := new(GetGameReply)
	err := c.cc.Invoke(ctx, V1Games_GetGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1GamesClient) GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesReply, error) {
	out := new(GetGamesReply)
	err := c.cc.Invoke(ctx, V1Games_GetGames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1GamesClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1Games_CreateGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1GamesClient) DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1Games_DeleteGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1GamesClient) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1Games_UpdateGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1GamesServer is the server API for V1Games service.
// All implementations must embed UnimplementedV1GamesServer
// for forward compatibility
type V1GamesServer interface {
	GetGame(context.Context, *GetGameRequest) (*GetGameReply, error)
	GetGames(context.Context, *GetGamesRequest) (*GetGamesReply, error)
	CreateGame(context.Context, *CreateGameRequest) (*EmptyReply, error)
	DeleteGame(context.Context, *DeleteGameRequest) (*EmptyReply, error)
	UpdateGame(context.Context, *UpdateGameRequest) (*EmptyReply, error)
	mustEmbedUnimplementedV1GamesServer()
}

// UnimplementedV1GamesServer must be embedded to have forward compatible implementations.
type UnimplementedV1GamesServer struct {
}

func (UnimplementedV1GamesServer) GetGame(context.Context, *GetGameRequest) (*GetGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedV1GamesServer) GetGames(context.Context, *GetGamesRequest) (*GetGamesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedV1GamesServer) CreateGame(context.Context, *CreateGameRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedV1GamesServer) DeleteGame(context.Context, *DeleteGameRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGame not implemented")
}
func (UnimplementedV1GamesServer) UpdateGame(context.Context, *UpdateGameRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}
func (UnimplementedV1GamesServer) mustEmbedUnimplementedV1GamesServer() {}

// UnsafeV1GamesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1GamesServer will
// result in compilation errors.
type UnsafeV1GamesServer interface {
	mustEmbedUnimplementedV1GamesServer()
}

func RegisterV1GamesServer(s grpc.ServiceRegistrar, srv V1GamesServer) {
	s.RegisterService(&V1Games_ServiceDesc, srv)
}

func _V1Games_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1GamesServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Games_GetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1GamesServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Games_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1GamesServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Games_GetGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1GamesServer).GetGames(ctx, req.(*GetGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Games_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1GamesServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Games_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1GamesServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Games_DeleteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1GamesServer).DeleteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Games_DeleteGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1GamesServer).DeleteGame(ctx, req.(*DeleteGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Games_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1GamesServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Games_UpdateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1GamesServer).UpdateGame(ctx, req.(*UpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1Games_ServiceDesc is the grpc.ServiceDesc for V1Games service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1Games_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "games.V1Games",
	HandlerType: (*V1GamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGame",
			Handler:    _V1Games_GetGame_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _V1Games_GetGames_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _V1Games_CreateGame_Handler,
		},
		{
			MethodName: "DeleteGame",
			Handler:    _V1Games_DeleteGame_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _V1Games_UpdateGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/games/game.proto",
}
