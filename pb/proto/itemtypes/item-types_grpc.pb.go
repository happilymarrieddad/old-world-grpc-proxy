// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/itemtypes/item-types.proto

package itemtypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1ItemTypes_GetItemTypes_FullMethodName   = "/itemtypes.V1ItemTypes/GetItemTypes"
	V1ItemTypes_GetItemType_FullMethodName    = "/itemtypes.V1ItemTypes/GetItemType"
	V1ItemTypes_CreateItemType_FullMethodName = "/itemtypes.V1ItemTypes/CreateItemType"
	V1ItemTypes_UpdateItemType_FullMethodName = "/itemtypes.V1ItemTypes/UpdateItemType"
	V1ItemTypes_DeleteItemType_FullMethodName = "/itemtypes.V1ItemTypes/DeleteItemType"
)

// V1ItemTypesClient is the client API for V1ItemTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1ItemTypesClient interface {
	GetItemTypes(ctx context.Context, in *GetItemTypesRequest, opts ...grpc.CallOption) (*GetItemTypesReply, error)
	GetItemType(ctx context.Context, in *GetItemTypeRequest, opts ...grpc.CallOption) (*ItemType, error)
	CreateItemType(ctx context.Context, in *CreateItemTypeRequest, opts ...grpc.CallOption) (*ItemType, error)
	UpdateItemType(ctx context.Context, in *UpdateItemTypeRequest, opts ...grpc.CallOption) (*ItemType, error)
	DeleteItemType(ctx context.Context, in *DeleteItemTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1ItemTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1ItemTypesClient(cc grpc.ClientConnInterface) V1ItemTypesClient {
	return &v1ItemTypesClient{cc}
}

func (c *v1ItemTypesClient) GetItemTypes(ctx context.Context, in *GetItemTypesRequest, opts ...grpc.CallOption) (*GetItemTypesReply, error) {
	out := new(GetItemTypesReply)
	err := c.cc.Invoke(ctx, V1ItemTypes_GetItemTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemTypesClient) GetItemType(ctx context.Context, in *GetItemTypeRequest, opts ...grpc.CallOption) (*ItemType, error) {
	out := new(ItemType)
	err := c.cc.Invoke(ctx, V1ItemTypes_GetItemType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemTypesClient) CreateItemType(ctx context.Context, in *CreateItemTypeRequest, opts ...grpc.CallOption) (*ItemType, error) {
	out := new(ItemType)
	err := c.cc.Invoke(ctx, V1ItemTypes_CreateItemType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemTypesClient) UpdateItemType(ctx context.Context, in *UpdateItemTypeRequest, opts ...grpc.CallOption) (*ItemType, error) {
	out := new(ItemType)
	err := c.cc.Invoke(ctx, V1ItemTypes_UpdateItemType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1ItemTypesClient) DeleteItemType(ctx context.Context, in *DeleteItemTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1ItemTypes_DeleteItemType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1ItemTypesServer is the server API for V1ItemTypes service.
// All implementations must embed UnimplementedV1ItemTypesServer
// for forward compatibility
type V1ItemTypesServer interface {
	GetItemTypes(context.Context, *GetItemTypesRequest) (*GetItemTypesReply, error)
	GetItemType(context.Context, *GetItemTypeRequest) (*ItemType, error)
	CreateItemType(context.Context, *CreateItemTypeRequest) (*ItemType, error)
	UpdateItemType(context.Context, *UpdateItemTypeRequest) (*ItemType, error)
	DeleteItemType(context.Context, *DeleteItemTypeRequest) (*EmptyReply, error)
	mustEmbedUnimplementedV1ItemTypesServer()
}

// UnimplementedV1ItemTypesServer must be embedded to have forward compatible implementations.
type UnimplementedV1ItemTypesServer struct {
}

func (UnimplementedV1ItemTypesServer) GetItemTypes(context.Context, *GetItemTypesRequest) (*GetItemTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemTypes not implemented")
}
func (UnimplementedV1ItemTypesServer) GetItemType(context.Context, *GetItemTypeRequest) (*ItemType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemType not implemented")
}
func (UnimplementedV1ItemTypesServer) CreateItemType(context.Context, *CreateItemTypeRequest) (*ItemType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemType not implemented")
}
func (UnimplementedV1ItemTypesServer) UpdateItemType(context.Context, *UpdateItemTypeRequest) (*ItemType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemType not implemented")
}
func (UnimplementedV1ItemTypesServer) DeleteItemType(context.Context, *DeleteItemTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemType not implemented")
}
func (UnimplementedV1ItemTypesServer) mustEmbedUnimplementedV1ItemTypesServer() {}

// UnsafeV1ItemTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1ItemTypesServer will
// result in compilation errors.
type UnsafeV1ItemTypesServer interface {
	mustEmbedUnimplementedV1ItemTypesServer()
}

func RegisterV1ItemTypesServer(s grpc.ServiceRegistrar, srv V1ItemTypesServer) {
	s.RegisterService(&V1ItemTypes_ServiceDesc, srv)
}

func _V1ItemTypes_GetItemTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemTypesServer).GetItemTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ItemTypes_GetItemTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemTypesServer).GetItemTypes(ctx, req.(*GetItemTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ItemTypes_GetItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemTypesServer).GetItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ItemTypes_GetItemType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemTypesServer).GetItemType(ctx, req.(*GetItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ItemTypes_CreateItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemTypesServer).CreateItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ItemTypes_CreateItemType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemTypesServer).CreateItemType(ctx, req.(*CreateItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ItemTypes_UpdateItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemTypesServer).UpdateItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ItemTypes_UpdateItemType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemTypesServer).UpdateItemType(ctx, req.(*UpdateItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1ItemTypes_DeleteItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1ItemTypesServer).DeleteItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1ItemTypes_DeleteItemType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1ItemTypesServer).DeleteItemType(ctx, req.(*DeleteItemTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1ItemTypes_ServiceDesc is the grpc.ServiceDesc for V1ItemTypes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1ItemTypes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "itemtypes.V1ItemTypes",
	HandlerType: (*V1ItemTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemTypes",
			Handler:    _V1ItemTypes_GetItemTypes_Handler,
		},
		{
			MethodName: "GetItemType",
			Handler:    _V1ItemTypes_GetItemType_Handler,
		},
		{
			MethodName: "CreateItemType",
			Handler:    _V1ItemTypes_CreateItemType_Handler,
		},
		{
			MethodName: "UpdateItemType",
			Handler:    _V1ItemTypes_UpdateItemType_Handler,
		},
		{
			MethodName: "DeleteItemType",
			Handler:    _V1ItemTypes_DeleteItemType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/itemtypes/item-types.proto",
}
