// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/optiontypes/option-types.proto

package optiontypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1OptionTypes_GetOptionTypes_FullMethodName   = "/optiontypes.V1OptionTypes/GetOptionTypes"
	V1OptionTypes_GetOptionType_FullMethodName    = "/optiontypes.V1OptionTypes/GetOptionType"
	V1OptionTypes_CreateOptionType_FullMethodName = "/optiontypes.V1OptionTypes/CreateOptionType"
	V1OptionTypes_UpdateOptionType_FullMethodName = "/optiontypes.V1OptionTypes/UpdateOptionType"
	V1OptionTypes_DeleteOptionType_FullMethodName = "/optiontypes.V1OptionTypes/DeleteOptionType"
)

// V1OptionTypesClient is the client API for V1OptionTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1OptionTypesClient interface {
	GetOptionTypes(ctx context.Context, in *GetOptionTypesRequest, opts ...grpc.CallOption) (*GetOptionTypesReply, error)
	GetOptionType(ctx context.Context, in *GetOptionTypeRequest, opts ...grpc.CallOption) (*OptionType, error)
	CreateOptionType(ctx context.Context, in *CreateOptionTypeRequest, opts ...grpc.CallOption) (*OptionType, error)
	UpdateOptionType(ctx context.Context, in *UpdateOptionTypeRequest, opts ...grpc.CallOption) (*OptionType, error)
	DeleteOptionType(ctx context.Context, in *DeleteOptionTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type v1OptionTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1OptionTypesClient(cc grpc.ClientConnInterface) V1OptionTypesClient {
	return &v1OptionTypesClient{cc}
}

func (c *v1OptionTypesClient) GetOptionTypes(ctx context.Context, in *GetOptionTypesRequest, opts ...grpc.CallOption) (*GetOptionTypesReply, error) {
	out := new(GetOptionTypesReply)
	err := c.cc.Invoke(ctx, V1OptionTypes_GetOptionTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1OptionTypesClient) GetOptionType(ctx context.Context, in *GetOptionTypeRequest, opts ...grpc.CallOption) (*OptionType, error) {
	out := new(OptionType)
	err := c.cc.Invoke(ctx, V1OptionTypes_GetOptionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1OptionTypesClient) CreateOptionType(ctx context.Context, in *CreateOptionTypeRequest, opts ...grpc.CallOption) (*OptionType, error) {
	out := new(OptionType)
	err := c.cc.Invoke(ctx, V1OptionTypes_CreateOptionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1OptionTypesClient) UpdateOptionType(ctx context.Context, in *UpdateOptionTypeRequest, opts ...grpc.CallOption) (*OptionType, error) {
	out := new(OptionType)
	err := c.cc.Invoke(ctx, V1OptionTypes_UpdateOptionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1OptionTypesClient) DeleteOptionType(ctx context.Context, in *DeleteOptionTypeRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1OptionTypes_DeleteOptionType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1OptionTypesServer is the server API for V1OptionTypes service.
// All implementations must embed UnimplementedV1OptionTypesServer
// for forward compatibility
type V1OptionTypesServer interface {
	GetOptionTypes(context.Context, *GetOptionTypesRequest) (*GetOptionTypesReply, error)
	GetOptionType(context.Context, *GetOptionTypeRequest) (*OptionType, error)
	CreateOptionType(context.Context, *CreateOptionTypeRequest) (*OptionType, error)
	UpdateOptionType(context.Context, *UpdateOptionTypeRequest) (*OptionType, error)
	DeleteOptionType(context.Context, *DeleteOptionTypeRequest) (*EmptyReply, error)
	mustEmbedUnimplementedV1OptionTypesServer()
}

// UnimplementedV1OptionTypesServer must be embedded to have forward compatible implementations.
type UnimplementedV1OptionTypesServer struct {
}

func (UnimplementedV1OptionTypesServer) GetOptionTypes(context.Context, *GetOptionTypesRequest) (*GetOptionTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptionTypes not implemented")
}
func (UnimplementedV1OptionTypesServer) GetOptionType(context.Context, *GetOptionTypeRequest) (*OptionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptionType not implemented")
}
func (UnimplementedV1OptionTypesServer) CreateOptionType(context.Context, *CreateOptionTypeRequest) (*OptionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOptionType not implemented")
}
func (UnimplementedV1OptionTypesServer) UpdateOptionType(context.Context, *UpdateOptionTypeRequest) (*OptionType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOptionType not implemented")
}
func (UnimplementedV1OptionTypesServer) DeleteOptionType(context.Context, *DeleteOptionTypeRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOptionType not implemented")
}
func (UnimplementedV1OptionTypesServer) mustEmbedUnimplementedV1OptionTypesServer() {}

// UnsafeV1OptionTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1OptionTypesServer will
// result in compilation errors.
type UnsafeV1OptionTypesServer interface {
	mustEmbedUnimplementedV1OptionTypesServer()
}

func RegisterV1OptionTypesServer(s grpc.ServiceRegistrar, srv V1OptionTypesServer) {
	s.RegisterService(&V1OptionTypes_ServiceDesc, srv)
}

func _V1OptionTypes_GetOptionTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptionTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1OptionTypesServer).GetOptionTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1OptionTypes_GetOptionTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1OptionTypesServer).GetOptionTypes(ctx, req.(*GetOptionTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1OptionTypes_GetOptionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1OptionTypesServer).GetOptionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1OptionTypes_GetOptionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1OptionTypesServer).GetOptionType(ctx, req.(*GetOptionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1OptionTypes_CreateOptionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1OptionTypesServer).CreateOptionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1OptionTypes_CreateOptionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1OptionTypesServer).CreateOptionType(ctx, req.(*CreateOptionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1OptionTypes_UpdateOptionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1OptionTypesServer).UpdateOptionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1OptionTypes_UpdateOptionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1OptionTypesServer).UpdateOptionType(ctx, req.(*UpdateOptionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1OptionTypes_DeleteOptionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOptionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1OptionTypesServer).DeleteOptionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1OptionTypes_DeleteOptionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1OptionTypesServer).DeleteOptionType(ctx, req.(*DeleteOptionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1OptionTypes_ServiceDesc is the grpc.ServiceDesc for V1OptionTypes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1OptionTypes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "optiontypes.V1OptionTypes",
	HandlerType: (*V1OptionTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOptionTypes",
			Handler:    _V1OptionTypes_GetOptionTypes_Handler,
		},
		{
			MethodName: "GetOptionType",
			Handler:    _V1OptionTypes_GetOptionType_Handler,
		},
		{
			MethodName: "CreateOptionType",
			Handler:    _V1OptionTypes_CreateOptionType_Handler,
		},
		{
			MethodName: "UpdateOptionType",
			Handler:    _V1OptionTypes_UpdateOptionType_Handler,
		},
		{
			MethodName: "DeleteOptionType",
			Handler:    _V1OptionTypes_DeleteOptionType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/optiontypes/option-types.proto",
}
