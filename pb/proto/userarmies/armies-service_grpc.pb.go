// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/userarmies/armies-service.proto

package userarmies

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1UserArmies_GetUserArmies_FullMethodName   = "/userarmies.V1UserArmies/GetUserArmies"
	V1UserArmies_GetUserArmy_FullMethodName     = "/userarmies.V1UserArmies/GetUserArmy"
	V1UserArmies_CreateUserArmy_FullMethodName  = "/userarmies.V1UserArmies/CreateUserArmy"
	V1UserArmies_DestroyUserArmy_FullMethodName = "/userarmies.V1UserArmies/DestroyUserArmy"
	V1UserArmies_AddUnit_FullMethodName         = "/userarmies.V1UserArmies/AddUnit"
	V1UserArmies_RemoveUnit_FullMethodName      = "/userarmies.V1UserArmies/RemoveUnit"
	V1UserArmies_UpdateUserArmy_FullMethodName  = "/userarmies.V1UserArmies/UpdateUserArmy"
)

// V1UserArmiesClient is the client API for V1UserArmies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1UserArmiesClient interface {
	GetUserArmies(ctx context.Context, in *GetUserArmiesRequest, opts ...grpc.CallOption) (*GetUserArmiesReply, error)
	GetUserArmy(ctx context.Context, in *GetUserArmyRequest, opts ...grpc.CallOption) (*GetUserArmyReply, error)
	CreateUserArmy(ctx context.Context, in *CreateUserArmyRequest, opts ...grpc.CallOption) (*CreateUserArmyReply, error)
	DestroyUserArmy(ctx context.Context, in *DestroyUserArmyRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	AddUnit(ctx context.Context, in *AddUnitRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	RemoveUnit(ctx context.Context, in *RemoveUnitRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	UpdateUserArmy(ctx context.Context, in *UpdateUserArmyRequest, opts ...grpc.CallOption) (*GetUserArmyReply, error)
}

type v1UserArmiesClient struct {
	cc grpc.ClientConnInterface
}

func NewV1UserArmiesClient(cc grpc.ClientConnInterface) V1UserArmiesClient {
	return &v1UserArmiesClient{cc}
}

func (c *v1UserArmiesClient) GetUserArmies(ctx context.Context, in *GetUserArmiesRequest, opts ...grpc.CallOption) (*GetUserArmiesReply, error) {
	out := new(GetUserArmiesReply)
	err := c.cc.Invoke(ctx, V1UserArmies_GetUserArmies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UserArmiesClient) GetUserArmy(ctx context.Context, in *GetUserArmyRequest, opts ...grpc.CallOption) (*GetUserArmyReply, error) {
	out := new(GetUserArmyReply)
	err := c.cc.Invoke(ctx, V1UserArmies_GetUserArmy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UserArmiesClient) CreateUserArmy(ctx context.Context, in *CreateUserArmyRequest, opts ...grpc.CallOption) (*CreateUserArmyReply, error) {
	out := new(CreateUserArmyReply)
	err := c.cc.Invoke(ctx, V1UserArmies_CreateUserArmy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UserArmiesClient) DestroyUserArmy(ctx context.Context, in *DestroyUserArmyRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1UserArmies_DestroyUserArmy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UserArmiesClient) AddUnit(ctx context.Context, in *AddUnitRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1UserArmies_AddUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UserArmiesClient) RemoveUnit(ctx context.Context, in *RemoveUnitRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1UserArmies_RemoveUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1UserArmiesClient) UpdateUserArmy(ctx context.Context, in *UpdateUserArmyRequest, opts ...grpc.CallOption) (*GetUserArmyReply, error) {
	out := new(GetUserArmyReply)
	err := c.cc.Invoke(ctx, V1UserArmies_UpdateUserArmy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1UserArmiesServer is the server API for V1UserArmies service.
// All implementations must embed UnimplementedV1UserArmiesServer
// for forward compatibility
type V1UserArmiesServer interface {
	GetUserArmies(context.Context, *GetUserArmiesRequest) (*GetUserArmiesReply, error)
	GetUserArmy(context.Context, *GetUserArmyRequest) (*GetUserArmyReply, error)
	CreateUserArmy(context.Context, *CreateUserArmyRequest) (*CreateUserArmyReply, error)
	DestroyUserArmy(context.Context, *DestroyUserArmyRequest) (*EmptyReply, error)
	AddUnit(context.Context, *AddUnitRequest) (*EmptyReply, error)
	RemoveUnit(context.Context, *RemoveUnitRequest) (*EmptyReply, error)
	UpdateUserArmy(context.Context, *UpdateUserArmyRequest) (*GetUserArmyReply, error)
	mustEmbedUnimplementedV1UserArmiesServer()
}

// UnimplementedV1UserArmiesServer must be embedded to have forward compatible implementations.
type UnimplementedV1UserArmiesServer struct {
}

func (UnimplementedV1UserArmiesServer) GetUserArmies(context.Context, *GetUserArmiesRequest) (*GetUserArmiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArmies not implemented")
}
func (UnimplementedV1UserArmiesServer) GetUserArmy(context.Context, *GetUserArmyRequest) (*GetUserArmyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArmy not implemented")
}
func (UnimplementedV1UserArmiesServer) CreateUserArmy(context.Context, *CreateUserArmyRequest) (*CreateUserArmyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserArmy not implemented")
}
func (UnimplementedV1UserArmiesServer) DestroyUserArmy(context.Context, *DestroyUserArmyRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyUserArmy not implemented")
}
func (UnimplementedV1UserArmiesServer) AddUnit(context.Context, *AddUnitRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUnit not implemented")
}
func (UnimplementedV1UserArmiesServer) RemoveUnit(context.Context, *RemoveUnitRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUnit not implemented")
}
func (UnimplementedV1UserArmiesServer) UpdateUserArmy(context.Context, *UpdateUserArmyRequest) (*GetUserArmyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserArmy not implemented")
}
func (UnimplementedV1UserArmiesServer) mustEmbedUnimplementedV1UserArmiesServer() {}

// UnsafeV1UserArmiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1UserArmiesServer will
// result in compilation errors.
type UnsafeV1UserArmiesServer interface {
	mustEmbedUnimplementedV1UserArmiesServer()
}

func RegisterV1UserArmiesServer(s grpc.ServiceRegistrar, srv V1UserArmiesServer) {
	s.RegisterService(&V1UserArmies_ServiceDesc, srv)
}

func _V1UserArmies_GetUserArmies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserArmiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UserArmiesServer).GetUserArmies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UserArmies_GetUserArmies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UserArmiesServer).GetUserArmies(ctx, req.(*GetUserArmiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UserArmies_GetUserArmy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserArmyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UserArmiesServer).GetUserArmy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UserArmies_GetUserArmy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UserArmiesServer).GetUserArmy(ctx, req.(*GetUserArmyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UserArmies_CreateUserArmy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserArmyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UserArmiesServer).CreateUserArmy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UserArmies_CreateUserArmy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UserArmiesServer).CreateUserArmy(ctx, req.(*CreateUserArmyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UserArmies_DestroyUserArmy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyUserArmyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UserArmiesServer).DestroyUserArmy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UserArmies_DestroyUserArmy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UserArmiesServer).DestroyUserArmy(ctx, req.(*DestroyUserArmyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UserArmies_AddUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UserArmiesServer).AddUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UserArmies_AddUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UserArmiesServer).AddUnit(ctx, req.(*AddUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UserArmies_RemoveUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UserArmiesServer).RemoveUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UserArmies_RemoveUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UserArmiesServer).RemoveUnit(ctx, req.(*RemoveUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1UserArmies_UpdateUserArmy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserArmyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1UserArmiesServer).UpdateUserArmy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1UserArmies_UpdateUserArmy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1UserArmiesServer).UpdateUserArmy(ctx, req.(*UpdateUserArmyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1UserArmies_ServiceDesc is the grpc.ServiceDesc for V1UserArmies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1UserArmies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userarmies.V1UserArmies",
	HandlerType: (*V1UserArmiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserArmies",
			Handler:    _V1UserArmies_GetUserArmies_Handler,
		},
		{
			MethodName: "GetUserArmy",
			Handler:    _V1UserArmies_GetUserArmy_Handler,
		},
		{
			MethodName: "CreateUserArmy",
			Handler:    _V1UserArmies_CreateUserArmy_Handler,
		},
		{
			MethodName: "DestroyUserArmy",
			Handler:    _V1UserArmies_DestroyUserArmy_Handler,
		},
		{
			MethodName: "AddUnit",
			Handler:    _V1UserArmies_AddUnit_Handler,
		},
		{
			MethodName: "RemoveUnit",
			Handler:    _V1UserArmies_RemoveUnit_Handler,
		},
		{
			MethodName: "UpdateUserArmy",
			Handler:    _V1UserArmies_UpdateUserArmy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/userarmies/armies-service.proto",
}
